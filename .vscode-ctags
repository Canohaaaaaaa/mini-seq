!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/drxeno/programmation/PSAR/mini-seq/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
DETAIL	mini_seq.cpp	/^#define DETAIL /;"	d	file:
InOut	Socket.hh	/^	InOut(size_t taille) : Socket(taille){}$/;"	f	class:InOut
InOut	Socket.hh	/^class InOut : public Socket{$/;"	c
Input	Socket.hh	/^	Input(size_t taille) : Socket(taille){}$/;"	f	class:Input
Input	Socket.hh	/^class Input : public Socket {$/;"	c
Output	Socket.hh	/^	Output(size_t taille) : Socket(taille){}$/;"	f	class:Output
Output	Socket.hh	/^class Output : public Socket {$/;"	c
SIZE	mini_seq.cpp	/^#define SIZE /;"	d	file:
SIZE_SEQ	mini_seq.cpp	/^#define SIZE_SEQ /;"	d	file:
Sequence	Sequence.hh	/^	Sequence(vector<Triplet> ordre, bool io = false) : current_step(0){$/;"	f	class:Sequence
Sequence	Sequence.hh	/^class Sequence{$/;"	c
Socket	Socket.hh	/^	Socket(size_t taille) : size(taille){}$/;"	f	class:Socket
Socket	Socket.hh	/^class  Socket$/;"	c
Task	Task.hh	/^	Task(function<void(size_t, void*, size_t, void*)> func, Socket &socket_in ,Socket &socket_out) /;"	f	class:Task
Task	Task.hh	/^class Task{$/;"	c
Triplet	Sequence.hh	/^	Triplet(size_t size_in, size_t size_out, function<void(size_t, void*, size_t, void*)> func) : s/;"	f	struct:Triplet
Triplet	Sequence.hh	/^struct Triplet{ $/;"	s
bench_sequence	mini_seq.cpp	/^void bench_sequence(int size_seq,std::ofstream& file){$/;"	f	typeref:typename:void
bench_tache	mini_seq.cpp	/^void bench_tache(int size,std::ofstream& file){$/;"	f	typeref:typename:void
current_step	Sequence.hh	/^	int current_step, max_step;$/;"	m	class:Sequence	typeref:typename:int
data	Socket.hh	/^	void *data;$/;"	m	class:Socket	typeref:typename:void *
display	Socket.hh	/^	void display(){$/;"	f	class:Socket	typeref:typename:void
exec	Sequence.hh	/^	void exec(void * first_input, bool bench = false){$/;"	f	class:Sequence	typeref:typename:void
exec	Task.hh	/^	void exec(){$/;"	f	class:Task	typeref:typename:void
func	Sequence.hh	/^	function<void(size_t, void*, size_t, void*)> func;$/;"	m	struct:Triplet	typeref:typename:function<void (size_t,void *,size_t,void *)>
func	Task.hh	/^	function<void(size_t, void*, size_t, void*)> func;$/;"	m	class:Task	typeref:typename:function<void (size_t,void *,size_t,void *)>
func_inc	mini_seq.cpp	/^function<void(size_t, void*, size_t, void*)> func_inc = increment;$/;"	v	typeref:typename:function<void (size_t,void *,size_t,void *)>
get_data	Socket.hh	/^	void* get_data(){$/;"	f	class:Socket	typeref:typename:void *
get_input_socket	Task.hh	/^	Socket& get_input_socket(){$/;"	f	class:Task	typeref:typename:Socket &
get_output_socket	Task.hh	/^	Socket& get_output_socket(){$/;"	f	class:Task	typeref:typename:Socket &
get_size	Socket.hh	/^	size_t get_size(){$/;"	f	class:Socket	typeref:typename:size_t
increment	mini_seq.cpp	/^void increment(size_t size_in, void*in , size_t size_out, void *out){$/;"	f	typeref:typename:void
main	mini_seq.cpp	/^int main(void){$/;"	f	typeref:typename:int
max_step	Sequence.hh	/^	int current_step, max_step;$/;"	m	class:Sequence	typeref:typename:int
read	Socket.hh	/^	virtual void* read(){$/;"	f	class:Socket	typeref:typename:void *
read	Socket.hh	/^	void* read(){$/;"	f	class:InOut	typeref:typename:void *
read	Socket.hh	/^	void* read(){$/;"	f	class:Input	typeref:typename:void *
sequence	mini_seq.cpp	/^void sequence(int size){$/;"	f	typeref:typename:void
set_data	Socket.hh	/^	void set_data(void* data){$/;"	f	class:Socket	typeref:typename:void
size	Socket.hh	/^	size_t size;$/;"	m	class:Socket	typeref:typename:size_t
size_in	Sequence.hh	/^	size_t size_in, size_out;$/;"	m	struct:Triplet	typeref:typename:size_t
size_out	Sequence.hh	/^	size_t size_in, size_out;$/;"	m	struct:Triplet	typeref:typename:size_t
socket_in	Task.hh	/^	Socket &socket_in;$/;"	m	class:Task	typeref:typename:Socket &
socket_out	Task.hh	/^	Socket &socket_out;$/;"	m	class:Task	typeref:typename:Socket &
sockets	Sequence.hh	/^	vector<Socket*> sockets;$/;"	m	class:Sequence	typeref:typename:vector<Socket * >
tache	mini_seq.cpp	/^void tache(int size){$/;"	f	typeref:typename:void
tasks	Sequence.hh	/^	vector<Task> tasks;$/;"	m	class:Sequence	typeref:typename:vector<Task>
timestamps	Sequence.hh	/^	vector<steady_clock::time_point> timestamps;$/;"	m	class:Sequence	typeref:typename:vector<steady_clock::time_point>
write	Socket.hh	/^	virtual void* write(){$/;"	f	class:Socket	typeref:typename:void *
write	Socket.hh	/^	void* write(){ \/\/Les output sockets $/;"	f	class:Output	typeref:typename:void *
write	Socket.hh	/^	void* write(){$/;"	f	class:InOut	typeref:typename:void *
~Output	Socket.hh	/^	~Output(){free(data);}$/;"	f	class:Output
~Sequence	Sequence.hh	/^	~Sequence(){$/;"	f	class:Sequence
~Socket	Socket.hh	/^	virtual ~Socket(){};$/;"	f	class:Socket
